JH QH KH TH AH AS TS 4S 6S 8S
import collections
import sys
#Find best hand given 10 input cards

#Boolean, 5 Same Suit 
def Flush(cardList):
    suits = []
    for c in cardList:
        suits.append(c[1])
    counter = collections.Counter(suits)
    if max(counter.values()) >= 5:
        return True
    else:
        return False

#Royal Flush
def Royal(cardList):
    rankCheck = ['A','K','J','Q','T']
    check = 0
    if Flush(cardList):
        for c in cardList:
            if c[0] in rankCheck:
                check+=1 
        if check == 5:
            return True
        else:
            return False
    else:
        return False
        

def maxKinds(cardList):
    counter = collections.Counter(cardList)
    return max(counter.values()) - 1
    
def numPairs(cardList):
    pairs = 0
    counter = collections.Counter(cardList)
    for i in counter.values():
        if i == 2:
            pairs+=1
    return pairs
     

# 5 Ranks Straight In a row
def Straight(cardList):

    lookup = {'A':1, 'T':10, 'J':11, 'Q':12, 'K':13}

    ranks = []
    maxRun = 0
    curRun = 0
    for c in cardList:
        if c[0] in lookup:
            ranks.append(lookup[c[0]])
        else:
            ranks.append( int(c[0]) )
    
    ranks.sort()
    
    for i in range(len(ranks)-1):
        if ranks[i+1] > ranks[i]:
            curRun+=1
            maxRun = max(maxRun, curRun)
        else:
            curRun = 0

    maxRun = max(maxRun, curRun)
    
    return True if maxRun >= 5 else False
    
# fullHouse: If One Pairs & 3 Of a Kind
def fullHouse(cardList):
    return True if numPairs(cardList) == 1 and maxKinds(cardList) == 3 else False


#Royal Flush > StraightFlush > 4 of a Kind > Full House > Flush > Straight > 3 of a Kind > 2 Pair > 1 Pair > High Card
def maxHand():
	
	for line in sys.stdin.readline():
		
		cardList = line.split()
		print(line)
		if len(cardList) == 0:
			return "Null Input" 
    
		bestHand = ''
    
		#cardList = cards.split()
    
		#Royal Flush
		royal = Royal(cardList)

		#Full House, 3 of a kind + 2 pair
		full_house = fullHouse(cardList)

		#Flush
		flush = Flush(cardList)
    
		#Straight
		straight = Straight(cardList)
    
		#StraightFlush
		straightFlush = True if straight and flush else False

		#Pairs: 1,2,3,4
		num_Pairs = numPairs(cardList)
    
		#Kind Max of a Kind
		kinds = maxKinds(cardList)
    
		#Hand Ordering, 
		if num_Pairs == 1:
			bestHand = "one-pair"
		if num_Pairs == 2:
			bestHand = "two-pair"
		if kinds == 3:
			bestHand = "three-of-a-Kind"
		if straight:
			bestHand = "straight"
		if flush:
			bestHand = "flush"
		if full_house:
			bestHand = "full-House"
		if kinds == 4:
			bestHand = "four-of-a-kind"
		if straightFlush:
			bestHand = "straight-flush"
		if royal:
			bestHand = "royal-flush"
		else:
			bestHand = "highest-card"
    
		hand = cardList[:5]    
		deck = cardList[5:]
		print("Hand:", hand, "Deck: ", deck, "Best hand: ", bestHand)

maxHand()
JH QH KH TH AH AS TS 4S 6S 8S
import collections
import sys
#Find best hand given 10 input cards

#Boolean, 5 Same Suit 
def Flush(cardList):
    suits = []
    for c in cardList:
        suits.append(c[1])
    counter = collections.Counter(suits)
    if max(counter.values()) >= 5:
        return True
    else:
        return False

#Royal Flush
def Royal(cardList):
    rankCheck = ['A','K','J','Q','T']
    check = 0
    if Flush(cardList):
        for c in cardList:
            if c[0] in rankCheck:
                check+=1 
        if check == 5:
            return True
        else:
            return False
    else:
        return False
        

def maxKinds(cardList):
    counter = collections.Counter(cardList)
    return max(counter.values()) - 1
    
def numPairs(cardList):
    pairs = 0
    counter = collections.Counter(cardList)
    for i in counter.values():
        if i == 2:
            pairs+=1
    return pairs
     

# 5 Ranks Straight In a row
def Straight(cardList):

    lookup = {'A':1, 'T':10, 'J':11, 'Q':12, 'K':13}

    ranks = []
    maxRun = 0
    curRun = 0
    for c in cardList:
        if c[0] in lookup:
            ranks.append(lookup[c[0]])
        else:
            ranks.append( int(c[0]) )
    
    ranks.sort()
    
    for i in range(len(ranks)-1):
        if ranks[i+1] > ranks[i]:
            curRun+=1
            maxRun = max(maxRun, curRun)
        else:
            curRun = 0

    maxRun = max(maxRun, curRun)
    
    return True if maxRun >= 5 else False
    
# fullHouse: If One Pairs & 3 Of a Kind
def fullHouse(cardList):
    return True if numPairs(cardList) == 1 and maxKinds(cardList) == 3 else False


#Royal Flush > StraightFlush > 4 of a Kind > Full House > Flush > Straight > 3 of a Kind > 2 Pair > 1 Pair > High Card
def maxHand():
	
	for line in sys.stdin.readline():
		
		cardList = line.split()
		print(line)
		if len(cardList) == 0:
			return "Null Input" 
    
		bestHand = ''
    
		#cardList = cards.split()
    
		#Royal Flush
		royal = Royal(cardList)

		#Full House, 3 of a kind + 2 pair
		full_house = fullHouse(cardList)

		#Flush
		flush = Flush(cardList)
    
		#Straight
		straight = Straight(cardList)
    
		#StraightFlush
		straightFlush = True if straight and flush else False

		#Pairs: 1,2,3,4
		num_Pairs = numPairs(cardList)
    
		#Kind Max of a Kind
		kinds = maxKinds(cardList)
    
		#Hand Ordering, 
		if num_Pairs == 1:
			bestHand = "one-pair"
		if num_Pairs == 2:
			bestHand = "two-pair"
		if kinds == 3:
			bestHand = "three-of-a-Kind"
		if straight:
			bestHand = "straight"
		if flush:
			bestHand = "flush"
		if full_house:
			bestHand = "full-House"
		if kinds == 4:
			bestHand = "four-of-a-kind"
		if straightFlush:
			bestHand = "straight-flush"
		if royal:
			bestHand = "royal-flush"
		else:
			bestHand = "highest-card"
    
		hand = cardList[:5]    
		deck = cardList[5:]
		print("Hand:", hand, "Deck: ", deck, "Best hand: ", bestHand)

maxHand()
